// Generated by gencpp from file image_node/FeatureMeasurement.msg
// DO NOT EDIT!


#ifndef IMAGE_NODE_MESSAGE_FEATUREMEASUREMENT_H
#define IMAGE_NODE_MESSAGE_FEATUREMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_node
{
template <class ContainerAllocator>
struct FeatureMeasurement_
{
  typedef FeatureMeasurement_<ContainerAllocator> Type;

  FeatureMeasurement_()
    : id(0)
    , lifetime(0)
    , u0(0.0)
    , v0(0.0)
    , u1(0.0)
    , v1(0.0)  {
    }
  FeatureMeasurement_(const ContainerAllocator& _alloc)
    : id(0)
    , lifetime(0)
    , u0(0.0)
    , v0(0.0)
    , u1(0.0)
    , v1(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef uint64_t _lifetime_type;
  _lifetime_type lifetime;

   typedef double _u0_type;
  _u0_type u0;

   typedef double _v0_type;
  _v0_type v0;

   typedef double _u1_type;
  _u1_type u1;

   typedef double _v1_type;
  _v1_type v1;





  typedef boost::shared_ptr< ::image_node::FeatureMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_node::FeatureMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureMeasurement_

typedef ::image_node::FeatureMeasurement_<std::allocator<void> > FeatureMeasurement;

typedef boost::shared_ptr< ::image_node::FeatureMeasurement > FeatureMeasurementPtr;
typedef boost::shared_ptr< ::image_node::FeatureMeasurement const> FeatureMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_node::FeatureMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_node::FeatureMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'image_node': ['/home/zhouxin/Desktop/my_msckf/src/my_msckf/image_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_node::FeatureMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_node::FeatureMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_node::FeatureMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_node::FeatureMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_node::FeatureMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_node::FeatureMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_node::FeatureMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3f08e286803c7e02277cee87e2f026a";
  }

  static const char* value(const ::image_node::FeatureMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3f08e286803c7e0ULL;
  static const uint64_t static_value2 = 0x2277cee87e2f026aULL;
};

template<class ContainerAllocator>
struct DataType< ::image_node::FeatureMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_node/FeatureMeasurement";
  }

  static const char* value(const ::image_node::FeatureMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_node::FeatureMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id\n"
"# Normalized feature coordinates (with identity intrinsic matrix)\n"
"uint64 lifetime\n"
"float64 u0 # horizontal coordinate in cam0\n"
"float64 v0 # vertical coordinate in cam0\n"
"float64 u1 # horizontal coordinate in cam0\n"
"float64 v1 # vertical coordinate in cam0\n"
;
  }

  static const char* value(const ::image_node::FeatureMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_node::FeatureMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.lifetime);
      stream.next(m.u0);
      stream.next(m.v0);
      stream.next(m.u1);
      stream.next(m.v1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_node::FeatureMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_node::FeatureMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "lifetime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.lifetime);
    s << indent << "u0: ";
    Printer<double>::stream(s, indent + "  ", v.u0);
    s << indent << "v0: ";
    Printer<double>::stream(s, indent + "  ", v.v0);
    s << indent << "u1: ";
    Printer<double>::stream(s, indent + "  ", v.u1);
    s << indent << "v1: ";
    Printer<double>::stream(s, indent + "  ", v.v1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_NODE_MESSAGE_FEATUREMEASUREMENT_H
